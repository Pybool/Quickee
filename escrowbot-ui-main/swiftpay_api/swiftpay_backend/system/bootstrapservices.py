"""This code is called from the project's wsgi.py script on starting the server"""
import os, json
from .services_id import *
from django.db import transaction
from ..serializer import *
from swiftpay_backend.model import *
PROCEED_PERM_X = None

# with open("C:/Users/hp/Documents/Workspace/Angular/Swift-pay/swiftpay_api/runnable.json", "w") as json_file:
#     print(json_file)
#     json.dump({"RX_RUNNABLE_INIT":"True"}, json_file)
FILE_RX = "runnable.json" or "manage.py"
relative_path = "swiftpay_api/{0}".format(FILE_RX)
path = os.path.abspath(relative_path).replace("\\","/")
res = "/".join(path.split("/")[:-3])
class ServicesInitializer(object):
    
    def __init__(self):
        
        self.getservicedata = dbInsertion
        self.getnetprovidersid = getnetprovidersid
        self.getcabprovidersid = getcabprovidersid
        self.getdiscoprovidersid = getdiscoprovidersid
        newpath = res +"/"+relative_path
        with open(newpath) as openfile:
        
            json_object = json.load(openfile)
            print(json_object)
            openfile.close()
            try:
                if json_object["RX_RUNNABLE_INIT"]=="TRUE":
                    global PROCEED_PERM_X
                    PROCEED_PERM_X = True
                    data = {
                            "RX_RUNNABLE_INIT": "FALSE",
                            "EDITABLE_FILE_RX":"Absolutely do not edit this file manually, this could trigger error initializing the database and even flush the database"
                            }
                    
                    with open(newpath, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=4)
                        print("[DATABASE BOOTSTRAP OPERATION] ========> INSERTING SERVICES FOR API PROVIDERS ")
                        f.close()
                        self.flushdatabase("manage.py")
                        self.createnetworkproviders()
                        self.createcableproviders()
                        

                else:
                    print("Software application is already live, will not mutate database")
                    PROCEED_PERM_X = False
                    self.flushdatabase("testfile.py")
            except Exception as e:
                print("An error {0} occured while initializing services databases".format(e))
                
    def flushdatabase(self,file):
        try:
            relative_path = "swiftpay_api/{0}".format(file)
            newpath = res +"/"+relative_path
            import subprocess
            bashcommand = "python {0} {1}".format(newpath,"flush")
            print("[DATABASE BOOTSTRAP OPERATION] ========> FLUSHING DATABASE ",bashcommand)
            if file=="testfile.py":
                subprocess.call(bashcommand, shell=True)
        except Exception as e:
            print("Error occured while flushing database ",e)    
    def createnetworkproviders(self):
        for i in range(len(NETWORK_PROVIDERS)):
            print(i+1,NETWORK_PROVIDERS[i])
            NetworkProviders.insert(i+1,NETWORK_PROVIDERS[i].title())

    def createcableproviders(self):
        for i in range(len(CABLE_PROVIDERS)):
            print(i+1,CABLE_PROVIDERS[i])
            CableTvProviders.insert(i+1,CABLE_PROVIDERS[i].title())
       
        
    @transaction.atomic()
    def insertairtimeservicedata(self):
        
        self.api_providers = list(DATA_SERVICES_ID.keys())
        print(self.api_providers)
        for provider in self.api_providers:
            try:
                airtimeservice = self.getservicedata(provider,"airtime")
                print(" ",airtimeservice)
                self.network_providers = list(airtimeservice.keys())
                for network in self.network_providers:
                    self.servicecodes = airtimeservice[""+network]
                    print("Inserting to database ",network,self.servicecodes.split("%")[0])
                    status = Airtime.insert(network,self.servicecodes.split("%")[0])
                    print(status)
            except Exception as e:
                print("====================> ",e)
      
    
    def insertdataservicedata(self):
        self.api_providers = list(DATA_SERVICES_ID.keys())
        print(self.api_providers)
        for provider in self.api_providers:
            try:
                dataservice = self.getservicedata(provider,"data")
                self.network_providers = list(dataservice.keys())
                for network in self.network_providers:
                    self.servicecodes = list(dataservice[""+network].keys())
                    netkey = dataservice[""+network]
                    for servicecode in self.servicecodes:
                        pass
                        print("\n\n1000 ", netkey[""+servicecode])
                        plan = netkey[""+servicecode]
                        status = DataSubscriptions.insert(self.getnetprovidersid(network),network,plan["plan"],servicecode,float(plan["amount"].split("₦")[1]),plan["duration"])
                        print(status)
                
            except Exception as e:
                print(e,e)
            
    
    def insertcableservicedata(self):
        self.api_providers = list(DATA_SERVICES_ID.keys())
        print(self.api_providers)
        for provider in self.api_providers:
            try:
                cableservice = self.getservicedata(provider,"cable")
                self.cable_providers = list(cableservice.keys())
                for cable in self.cable_providers:
                    self.servicecodes = list(cableservice[""+cable].keys())        
                    cabkey = cableservice[""+cable]
                    for servicecode in self.servicecodes:
                        pass
                        print("\n\n1000 ", cabkey[""+servicecode])
                        plan = cabkey[""+servicecode]
                        amount = (float(plan[2].split("₦")[1]) - (float(plan[2].split("₦")[1]) * float(plan[3].split("%")[0])/100))
                        print("Cable amount ", amount)
                        status = CableTvBouquets.insert(self.getcabprovidersid(cable),cable,plan[1],plan[0],amount)
                        print(status)
                
            except Exception as e:
                print(e,e)
    
    def insertelectricityservicedata(self):
        self.api_providers = list(DATA_SERVICES_ID.keys())
        print(self.api_providers)
        for provider in self.api_providers:
            # try:
                electricityservice = self.getservicedata(provider,"electricity")
                self.discos = list(electricityservice.keys())
                for disco in self.discos:
                    self.servicemeta_data = electricityservice[""+disco] 
                    print("Inserting to database ",self.getdiscoprovidersid(""+disco.lower()),self.servicemeta_data[1] ,disco,self.servicemeta_data[0],float(self.servicemeta_data[2].split("%")[0]))
                    status = ElectricityDiscos.insert(self.getdiscoprovidersid(""+disco.lower()),self.servicemeta_data[1],disco,self.servicemeta_data[0],float(self.servicemeta_data[2].split("%")[0]))
                    # print(status)
            # except Exception as e:
            #     print("====================> ",e)